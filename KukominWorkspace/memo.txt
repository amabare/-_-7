トップページはまだ
ログイン機能はセッション情報の設定以外できた
ログアウト機能はリダイレクト先以外はできた
店舗登録機能DBのテーブルが分かれすぎててできない                  ui_new_store_registration.html>store_registration>insert_registration
席情報登録機能はできた
席情報更新機能はできた(store_idは要設定セッション)                        seatlist>seat_change.html>seat_change>seat_change_conf>update
席情報削除できた                                               seatlist>seat_delete.jsp>seat_delete_conf>delete_seat
店舗検索自体はできるがURLの付与(storeidの付与も)などできない
ユーザ側の予約登録はできる(store_idは仮置き)



sudo javac -cp /opt/tomcat/lib/servlet-api.jar:. LoginServlet.java
sudo cp LoginServlet.classes WEB-INF/classes


sudo javac -cp /usr/share/java/mysql-connector-j.jar DatabaseUtility.java
sudo mysql -u root -p
password:root00


java -cp .:/usr/share/java/mysql-connector-java-9.1.0.jar DateOfViewReservation

sudo systemctl restart tomcat

+-----------------------+
| Tables_in_my_database |
+-----------------------+
| your_table            |
| 予約情報              |
| 予約者基本情報        |
| 利用者登録情報        |
| 店舗情報              |
+-----------------------+

http://34.238.111.79:8080/ui/login.html


INSERT INTO 利用者登録情報 (氏名, 性別, メールアドレス, 電話番号, パスワード)
VALUES 
('山田 太郎', 'M', 'taro.yamada@example.com', '08012345678', 'password1234'),
('佐藤 花子', 'F', 'hanako.sato@example.com', '09087654321', 'password5678'),
('鈴木 一郎', 'M', 'ichiro.suzuki@example.com', '07023456789', 'password91011'),
('田中 美奈子', 'F', 'minako.tanaka@example.com', '08098765432', 'password1213');


 client_loop: send disconnect: Broken pipe


mysql> INSERT INTO 店舗情報 (店舗ID, 店舗名, メールアドレス, パスワード, 住所, 電話番号, 営業時間)
    -> VALUES
    -> (1, '中央カフェ', 'cafe1@example.com', 'password1', '東京都中央区1-1-1', '0123456789', '09:00~18:00'),
    -> (2, '北町レストラン', 'restaurant2@example.com', 'password2', '北海道北町2-2-2', '0987654321', '10:00~21:00');

    mysql> INSERT INTO 席 (店舗ID, 席名, 収容人数, 使用状況)
    -> VALUES
    -> (1, '窓際の席', 4, '空席'),
    -> (1, '個室1', 2, '予約'),
    -> (2, 'カウンター席1', 1, '使用中');





    package your.package.name;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.Map;

public class DatabaseUtility {
    private static final String DB_URL = "jdbc:mysql://localhost:3306/your_database";
    private static final String DB_USER = "root";
    private static final String DB_PASSWORD = "root00";

    // SELECTモジュール
    public static ResultSet select(String tableName, String whereClause) throws Exception {
        String query = "SELECT * FROM " + tableName + " WHERE " + whereClause;

        Connection connection = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
        PreparedStatement statement = connection.prepareStatement(query);

        return statement.executeQuery();
    }

    // INSERTモジュール
    public static int insert(String tableName, Map<String, Object> values) throws Exception {
        StringBuilder columns = new StringBuilder();
        StringBuilder placeholders = new StringBuilder();

        for (String column : values.keySet()) {
            columns.append(column).append(",");
            placeholders.append("?,");
        }

        // 最後のカンマを削除
        columns.setLength(columns.length() - 1);
        placeholders.setLength(placeholders.length() - 1);

        String query = "INSERT INTO " + tableName + " (" + columns + ") VALUES (" + placeholders + ")";

        Connection connection = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
        PreparedStatement statement = connection.prepareStatement(query);

        int index = 1;
        for (Object value : values.values()) {
            statement.setObject(index++, value);
        }

        return statement.executeUpdate();
    }

    // UPDATEモジュール
    public static int update(String tableName, Map<String, Object> values, String whereClause) throws Exception {
        StringBuilder setClause = new StringBuilder();

        for (String column : values.keySet()) {
            setClause.append(column).append(" = ?,");
        }

        // 最後のカンマを削除
        setClause.setLength(setClause.length() - 1);

        String query = "UPDATE " + tableName + " SET " + setClause + " WHERE " + whereClause;

        Connection connection = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
        PreparedStatement statement = connection.prepareStatement(query);

        int index = 1;
        for (Object value : values.values()) {
            statement.setObject(index++, value);
        }

        return statement.executeUpdate();
    }

    // DELETEモジュール
    public static int delete(String tableName, String whereClause) throws Exception {
        String query = "DELETE FROM " + tableName + " WHERE " + whereClause;

        Connection connection = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
        PreparedStatement statement = connection.prepareStatement(query);

        return statement.executeUpdate();
    }
}
